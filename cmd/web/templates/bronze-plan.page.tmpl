{{template "base" .}}

{{define "title"}}
Bronze Plan
{{end}}

{{define "content"}}
{{$widget := index .Data "widget"}}
<h2 class="mt-3 text-center">Bronze Plan: {{formatCurrency $widget.Price}}</h2>
<hr>

<div class="alert alert-danger text-center d-none" id="card-messages"></div>
<form action="/payment-succeeded-temp" method="post"
    name="charge_form" id="charge_form"
    class="d-block needs-validation charge-form"
    autocomplete="off" novalidate="">

    <input type="hidden" name="product_id" id="product_id" value="{{$widget.ID}}">
    <input type="hidden" name="amount" id="amount" value="{{$widget.Price}}">

    <!-- <h3 class="mt-2 mb-3 text-center">{{$widget.Name}}: {{formatCurrency $widget.Price}}</h3> -->
    <p>{{$widget.Description}}</p>
    <hr>

    <div class="mb-3">
        <label for="first_name" class="form-label">First Name</label>
        <input type="text" class="form-control" id="first_name" name="first_name" 
            required="" autocomplete="first_name-new">
            <div id="first_name-help" class="valid-feedback">
                Looks good!
            </div>
    </div>

    <div class="mb-3">
        <label for="last_name" class="form-label">Last Name</label>
        <input type="text" class="form-control" id="last_name" name="last_name" 
            required="" autocomplete="last_name-new">
            <div id="last_name-help" class="valid-feedback">
                Looks good!
            </div>
    </div>

    <div class="mb-3">
        <label for="cardholder-email" class="form-label">Email</label>
        <input type="email" class="form-control" id="cardholder-email" name="email" 
            required="" autocomplete="cardholder-email-new">
    </div>

    <div class="mb-3">
        <label for="cardholder-name" class="form-label">Name on Card</label>
        <input type="text" class="form-control" id="cardholder-name" name="cardholder_name" 
            required="" autocomplete="cardholder-name-new">
    </div>


    <!-- card number via stripe -->
    <div class="mb-3">
        <label for="card-element" class="form-label">Credit Card</label>
        <div id="card-element" class="form-control"></div>
        <div class="alert-danger text-center" id="card-errors" role="alert"></div>
        <div class="alert-success text-center" id="card-success" role="alert"></div>
    </div>

    <hr>

    <!-- card validation -->
    <a id="pay-button" href="javascript:void(0)" class="btn btn-primary" onclick="val()">Pay {{formatCurrency $widget.Price}}/month</a>
    <div id="processing-payment" class="text-center d-none">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>

    <input type="hidden" name="payment_intent" id="payment_intent">
    <input type="hidden" name="payment_method" id="payment_method">
    <input type="hidden" name="payment_amount" id="payment_amount">
    <input type="hidden" name="payment_currency" id="payment_currency">
</form>
{{end}}

{{define "js"}}
{{$widget := index .Data "widget"}}

<script src="https://js.stripe.com/v3/"></script>

<script>
            let card;
    let stripe;
    const cardMessages = document.getElementById("card-messages");
    const payButton = document.getElementById("pay-button");
    const processing = document.getElementById("processing-payment");

    stripe = Stripe({{.StripePublishableKey}});

    function hidePayButton() {
        // prevent creditcard from processing twice
        payButton.classList.add("d-none");
        // hide spinner
        processing.classList.remove("d-none");
    }

    function showPayButtons() {
        payButton.classList.remove("d-none");
        processing.classList.add("d-none");
    }

    function showCardError(msg) {
        cardMessages.classList.add("alert-danger");
        cardMessages.classList.remove("alert-success");
        cardMessages.classList.remove("d-none");
        cardMessages.innerText = msg;
    }

    function showCardSuccess() {
        cardMessages.classList.remove("alert-danger");
        cardMessages.classList.add("alert-success");
        cardMessages.classList.remove("d-none");
        cardMessages.innerText = "Transaction successful";
    }

    function val() {
        let form = document.getElementById("charge_form");
        if (form.checkValidity() === false) {
            this.event.preventDefault(); // dont go further 
            this.event.stopPropagation();
            form.classList.add("was-validated");
            return;
        }
        form.classList.add("was-validated");
        hidePayButton();

        // how much is being charged 
        let amountToCharge = document.getElementById("amount").value;

        stripe.createPaymentMethod({
            type: 'card',
            card: card, 
            billing_details: {
                email: document.getElementById("cardholder-email").value,
            },
        }).then(stripePaymentMethodHandler);
    }

    function stripePaymentMethodHandler(result) {
        // error is from stripe's createPaymentMethod
        if (result.error) {
             showCardError(result.error.message);
        } else {
            // create customer and subscribe to plan 
            let payload = {
                product_id: document.getElementById("product_id").value,
                plan: '{{$widget.PlanID}}', 
                payment_method: result.paymentMethod.id, // from stripe
                email: document.getElementById("cardholder-email").value,
                last_four: result.paymentMethod.card.last4, // front stripe
                card_brand: result.paymentMethod.card.brand, 
                exp_month: result.paymentMethod.card.exp_month,
                exp_year: result.paymentMethod.card.exp_year,
                first_name: document.getElementById("first_name").value,
                last_name: document.getElementById("last_name").value, 
                amount: document.getElementById("amount").value,
            }

            // create request options 
            const requestOptions = {
                method: 'post', 
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                },
                // stringify payload
                body: JSON.stringify(payload),
            }

            // send post request
            fetch("{{.API}}/api/create-customer-and-subscribe-to-plan", requestOptions)
            .then(response => response.json())
            .then(function(data) {
                if (data.error === false) {

                    // hide processing button 
                    processing.classList.add("d-none");
                    showCardSuccess();
                    // store values in local storage
                    sessionStorage.first_name = document.getElementById("first_name").value; 
                    sessionStorage.last_name = document.getElementById("last_name").value; 
                    sessionStorage.amount = "{{formatCurrency $widget.Price}}"
                    sessionStorage.last_four = result.paymentMethod.card.last4; 

                    location.href = "/receipt/bronze";
                } else {
                    // remove green and read validation
                    document.getElementById("charge_form").classList.remove("was-validated");

                    // loop through data.errors
                    Object.entries(data.errors).forEach((i) => {
                        const [key, value] = i; 
                        console.log(`${key}: ${value}`);

                        // invalidate id thats associated with the key
                        document.getElementById(key).classList.add("is-invalid");
                        document.getElementById(key + "-help").classList.remove("valid-feedback");
                        document.getElementById(key + "-help").classList.add("invalid-feedback");
                        document.getElementById(key + "-help").innerText = value;
                    })
                    showPayButtons();
            }
            })
        }
    }

    (function () {
        // create stripe & elements 
        const elements = stripe.elements();
        const style = {
            base: {
                fontSize: '16px',
                lineHeight: '24px',
            }
        };

        // create card entry 
        card = elements.create('card', {
            style: style,
            hidePostalCode: true,
        });
        card.mount("#card-element");

        // check for input errors 
        card.addEventListener('change', function (event) {
            var displayError = document.getElementById("card-errors");
            if (event.error) {
                displayError.classList.remove('d-none');
                displayError.textContent = event.error.message;
            } else {
                displayError.classList.add('d-none') // hide error 
                displayError.textContent = '';
            }
        });
    })();

</script>
{{end}}